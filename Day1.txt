1. Scripting and Automation:
Python's simplicity and readability make it an excellent choice for scripting tasks. DevOps engineers use Python to automate repetitive tasks like deployment, configuration management, and system monitoring.

Example: Automating Backup

import shutil #shellutilities
import os

def backup_folder(source_folder, backup_folder):
    try:
        # Check if the source folder exists
        if not os.path.exists(source_folder):
            print(f"Error: Source folder '{source_folder}' does not exist.")
            return

        # Create the backup folder if it doesn't exist
        if not os.path.exists(backup_folder):
            os.makedirs(backup_folder)

        # Copy contents of source folder to backup folder
        shutil.copytree(source_folder, os.path.join(backup_folder, os.path.basename(source_folder)))

        print(f"Backup completed successfully.")
    except Exception as e:
        print(f"Error: {e}")

# Example usage
source_folder = '/path/to/source_folder'
backup_folder = '/path/to/backup_folder'
2. Configuration Management:
Tools like Ansible, which is widely used in DevOps, are built with Python. DevOps engineers use Ansible to manage and configure infrastructure as code.

Example: Ansible Playbook

- name: Install Apache
  hosts: web_servers
  tasks:
    - name: Update apt cache
      become: yes
      apt:
        update_cache: yes

    - name: Install Apache
      become: yes
      apt:
        name: apache2
        state: present
3. Continuous Integration/Continuous Deployment (CI/CD):
Python is used extensively in CI/CD pipelines. Tools like Jenkins, GitLab CI, and CircleCI support Python for automating build, test, and deploy processes.

Example: Jenkins Pipeline

pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                sh 'python my_build_script.py'
            }
        }
        stage('Test') {
            steps {
                sh 'python my_test_script.py'
            }
        }
        stage('Deploy') {
            steps {
                sh 'python my_deploy_script.py'
            }
        }
    }
}
4. Monitoring and Logging:
Python's extensive libraries like requests and psutil enable the creation of custom monitoring and logging solutions. This allows DevOps teams to monitor system health and analyze logs effectively.

Example: Monitoring with psutil

import psutil #lib for process and system monitoring in Python

cpu_percent = psutil.cpu_percent(interval=1)
memory_info = psutil.virtual_memory()

print(f'CPU Usage: {cpu_percent}%')
print(f'Memory Usage: {memory_info.percent}%')
